/******************************************************************
Wild Duck Independient Control
Project Created 8/3/2014
File PS_PAD.h

PlayStation Controller library
* Copyright (c) 2013 Hiroshi Suga - 2014 Miguel Silva

This program has been created by using mbed runtime libraries
for the platform FRDM-KL25Z in a offline project managed by
arm-gcc compiler.

For more details see (http://www.mbed.org) for a gerneal
overview. And for the development se (http://developer.mbed.org/)

*This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of
the License, or(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
<http://www.gnu.org/licenses/>
******************************************************************/

#include "mbed.h"   //// Also include mbed runtime libraries.
//#define __DEBUG__ //// debug definition to print on serial pc PS2 command handshake...

/*This enum defines butons & axis states constants for internal use of the class*/
enum TYPE {
	PAD_LEFT,
	PAD_BOTTOM,
	PAD_RIGHT,
	PAD_TOP,
	PAD_START,
	ANALOG_LEFT,
	ANALOG_RIGHT,
	PAD_SELECT,
	PAD_SQUARE,
	PAD_X,
	PAD_CIRCLE,
	PAD_TRIANGLE,
	PAD_R1,
	PAD_L1,
	PAD_R2,
	PAD_L2,
	BUTTONS,
	ANALOG_RX,
	ANALOG_RY,
	ANALOG_LX,
	ANALOG_LY,
};

/* Declaration od PS_PAD class
   This class handles the protocol layer of the comunicacion to 
   the PS2 controller. This class uses a Software SPI comunicacion 
   to the controller, because using the hardware periferical doesn't
   work for this special variation of SPI (almost I cannot make work
   propertly).

     1  2  3   4  5  6   7  8  9
   _______________________________
   \ o  o  o | o  o  o | o  o  o /
    ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅ ̅

	To comunicate with a PS2 controller the mster needs to initialize 
	first. The master send throught SPI array of byte that describes 
	a certain command. The master Enables the the analog sticks and
	also enables tha vibration. The commands are stored in a const char
	array. The command are the followings:

	const char enter_config_mode[5] = { 0x01, 0x43, 0x00, 0x01, 0x00 };
	const char enable_analog_mode[9] = { 0x01, 0x44, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00 };
	const char enable_vibration[9] = { 0x01, 0x4d, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff };
	const char exit_config_mode[9] = { 0x01, 0x43, 0x00, 0x00, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A };
	const char poll_command[9] = { 0x01, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

	Get Notice that the master needs to send 0x00 to continously receive 
	the complete response of the controller.

   The Software SPI are implemente in the member uint8_t SendSPI(uint8_t data)
   that uses the digital IO of a microcontroller. Could be any pin.
     * MOSI is a DigitalOut
	 * MISO is a DigitalIn
	 * SCK is a DigitalOut
	 * CS is a DigitalOut
   
   The Clock is generated by unmanaged noperation delays.
   The clock generation cycle is every 10us

        10us  __________  10us    ______
   SCK _______|  10 us |_________|


   As I just mentioned this class send the necessary commands
   to comunicate with the controller, then the class stores the
   PS2 controller response in a char array buffer.

   To configurate the PS2 controller at the beginig of the program
   need to call the int init() method.
   To init a new poll cycle is need to call the int poll method.

*/
class PS_PAD {
public:
	//// public constructor that takes as parameters
	//// the name of the pins for the software SPI Com,.
	PS_PAD(PinName mosi, PinName miso, PinName sck, PinName cs); 

	/*This method sends the initial configuration to the controller */
	int init();		

	/*This method sends poll command. this command polls returns the states 
	of the buttons & axis and stores the response*/
	int poll();

	/* This method returns a value of a certain state of a selected 
	button in the parameter TYPE t that is a enum define above, this 
	function works wto read button state and axis value state */
	int read(TYPE t);

	/*This method send the command to the controller to make a vribration
	of a internal motor, the parameter it takes are the intensity of the 
	vibration */
	int vibration(int v1, int v2);

private:
	/*Digital IO pins contructed in the default contructor function*/
	DigitalOut _clk;
	DigitalOut _mosi;
	DigitalIn _miso;
	DigitalOut _cs;

	/* Buffer that stores the last PS2 controller Response*/
	uint8_t _pad[6];

	/*Internal values of the last vibration instesity requested
	used in poll method to send in the poll command the values of the
	vibration */
	int _vib1, _vib2;

	/* It makes naticed if the controller is connected or opened successfully*/
	bool _connected;

	/* Software SPI function implmentation every byte transmission is in 160 us*/
	uint8_t SendSPI(uint8_t data);

	/* private method that controls the data flow */
	int send(const char *cmd, int len, char *dat);
};

//// End of file PS_PAD.h